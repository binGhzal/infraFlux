- name: Create directory for RKE2 config
  ansible.builtin.file:
    path: "/etc/rancher/rke2"
    state: directory
    mode: '0755'

- name: Create directory for RKE2 token
  ansible.builtin.file:
    path: "/var/lib/rancher/rke2/server"
    state: directory
    mode: '0755'
  when: inventory_hostname in groups['servers']

# Debug variables (temporarily commented out due to recursive template issue)
# - name: Debug RKE2 variables
#   ansible.builtin.debug:
#     msg:
#       - "VIP: {{ vip }}"
#       - "RKE2 Version: {{ rke2_version }}"
#       - "Kube-VIP Version: {{ kube_vip_version }}"
#       - "VIP Interface: {{ vip_interface }}"
#       - "Ansible User: {{ ansible_user }}"
#   run_once: true

# Create RKE2 systemd service files
- name: Create RKE2 server systemd service
  ansible.builtin.template:
    src: templates/rke2-server.service.j2
    dest: /etc/systemd/system/rke2-server.service
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname in groups['servers']

- name: Create RKE2 agent systemd service
  ansible.builtin.template:
    src: templates/rke2-agent.service.j2
    dest: /etc/systemd/system/rke2-agent.service
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname in groups['agents']

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true

# Copy server config to first server for bootstrap
- name: Deploy RKE2 server Configuration
  ansible.builtin.template:
    src: templates/rke2-server-config.j2
    dest: /etc/rancher/rke2/config.yaml
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname in groups['servers']

# Enable and start the first server to generate tokens etc
- name: Enable and start RKE2 server on first node
  ansible.builtin.systemd:
    name: rke2-server
    enabled: true
    state: started
    daemon_reload: true
  when: inventory_hostname == groups['servers'][0]

# Wait for RKE2 server to be fully initialized
- name: Wait for RKE2 server to be ready
  ansible.builtin.wait_for:
    port: 6443
    host: "{{ hostvars[groups['servers'][0]]['ansible_host'] }}"
    delay: 30
    timeout: 600
  when: inventory_hostname == groups['servers'][0]

# Wait for kube-vip to initialize the VIP
- name: Wait for VIP to be ready
  ansible.builtin.wait_for:
    port: 6443
    host: "{{ vip }}"
    delay: 60
    timeout: 300
  when: inventory_hostname == groups['servers'][0]

# Restart RKE2 service if VIP is not responding (kube-vip sometimes needs a restart)
- name: Restart RKE2 server if VIP is not ready
  ansible.builtin.systemd:
    name: rke2-server
    state: restarted
  when:
    - inventory_hostname == groups['servers'][0]
  failed_when: false

- name: Wait again for VIP after restart
  ansible.builtin.wait_for:
    port: 6443
    host: "{{ vip }}"
    delay: 30
    timeout: 300
  when: inventory_hostname == groups['servers'][0]

# wait for node token to be availale so that we can copy it, we need this to join other nodes
- name: Wait for node-token
  ansible.builtin.wait_for:
    path: /var/lib/rancher/rke2/server/node-token
    timeout: 600
  when: inventory_hostname == groups['servers'][0]

# wait for kubectl to be downloaded, part of the rke2 installation
- name: Wait for kubectl
  ansible.builtin.wait_for:
    path: /var/lib/rancher/rke2/bin/kubectl
    timeout: 600
  when: inventory_hostname == groups['servers'][0]

# copy kubectl to usr bin so that all users can run kubectl commands
- name: Copy kubectl to user bin
  ansible.builtin.copy:
    src: /var/lib/rancher/rke2/bin/kubectl
    dest: /usr/local/bin/kubectl
    mode: '0755'
    remote_src: true
  become: true
  when: inventory_hostname == groups['servers'][0]

# wait for the kubectl copy to complete
- name: Wait for kubectl
  ansible.builtin.wait_for:
    path: /usr/local/bin/kubectl
    timeout: 120
  when: inventory_hostname == groups['servers'][0]

# Save token as variable from the first server
- name: Fetch the token from the first server node
  ansible.builtin.slurp:
    src: /var/lib/rancher/rke2/server/node-token
  register: rke2_token
  when: inventory_hostname == groups['servers'][0]
  run_once: true

# Convert token to fact and share it with all nodes
- name: Save Master node-token for later use
  ansible.builtin.set_fact:
    token: "{{ rke2_token['content'] | b64decode | regex_replace('\n', '') }}"
  when:
    - inventory_hostname == groups['servers'][0]
    - rke2_token is defined

# Share token with all nodes
- name: Share token with all nodes
  ansible.builtin.set_fact:
    token: "{{ hostvars[groups['servers'][0]]['token'] }}"
  when:
    - inventory_hostname != groups['servers'][0]
    - hostvars[groups['servers'][0]]['token'] is defined

# Setup kubeconfig for user
- name: Ensure .kube directory exists in user's home
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]

# copy kubectl config file to .kube folder
- name: Copy config file to user home directory
  ansible.builtin.copy:
    src: /etc/rancher/rke2/rke2.yaml
    dest: "/home/{{ ansible_user }}/.kube/config"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0600"
  when: inventory_hostname == groups['servers'][0]

# Change IP from local to VIP for external access
- name: Replace IP address with VIP
  ansible.builtin.replace:
    path: /home/{{ ansible_user }}/.kube/config
    regexp: '127.0.0.1'
    replace: "{{ vip }}"
  when: inventory_hostname == groups['servers'][0]
