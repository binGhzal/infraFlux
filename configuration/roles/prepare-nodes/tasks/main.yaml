# Ensure facts are gathered first
- name: Gather facts
  ansible.builtin.setup:
  tags: always

# Update package cache and install required packages
- name: Update package cache
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"

- name: Install required packages
  ansible.builtin.package:
    name:
      - curl
      - wget
      - systemd
      - iptables
      - ipset
    state: present

# Ensure required kernel modules are loaded
- name: Load required kernel modules for Cilium eBPF
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - br_netfilter
    - overlay
    - ip_tables
    - iptable_nat
    - xt_socket
    - xt_bpf
  become: true

# Load optional kernel modules (may not be available on all kernels)
- name: Load optional kernel modules for Cilium eBPF
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - sch_bpf
  become: true
  failed_when: false
  ignore_errors: true

- name: Ensure essential kernel modules are loaded at boot
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/rke2.conf
    line: "{{ item }}"
    create: true
    mode: '0644'
  loop:
    - br_netfilter
    - overlay
    - ip_tables
    - iptable_nat
    - xt_socket
    - xt_bpf

# Add optional modules if they exist
- name: Check if optional kernel modules exist
  ansible.builtin.command: modinfo {{ item }}
  loop:
    - sch_bpf
  register: optional_modules
  failed_when: false
  ignore_errors: true
  changed_when: false

- name: Add optional kernel modules to boot configuration
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/rke2.conf
    line: "{{ item.item }}"
    create: true
    mode: '0644'
  loop: "{{ optional_modules.results }}"
  when: item.rc == 0

# Configure sysctl for eBPF optimization and networking
- name: Configure sysctl for eBPF optimization
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    reload: true
    sysctl_set: true
  loop:
    - { key: "net.ipv4.ip_forward", value: "1" }
    - { key: "net.ipv6.conf.all.forwarding", value: "1" }
    - { key: "net.core.bpf_jit_enable", value: "1" }
    - { key: "net.core.bpf_jit_kallsyms", value: "1" }
    - { key: "kernel.unprivileged_bpf_disabled", value: "1" }
    - { key: "net.bridge.bridge-nf-call-iptables", value: "1" }
    - { key: "net.bridge.bridge-nf-call-ip6tables", value: "1" }
    - { key: "net.core.rmem_max", value: "16777216" }
    - { key: "net.core.wmem_max", value: "16777216" }
    - { key: "net.ipv4.tcp_rmem", value: "4096 87380 16777216" }
    - { key: "net.ipv4.tcp_wmem", value: "4096 65536 16777216" }
  become: true

# Disable swap
- name: Disable swap
  ansible.builtin.command: swapoff -a
  changed_when: false
  failed_when: false

- name: Remove swap from fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: '.*swap.*'
    state: absent

# Configure BGP and Cilium firewall rules
- name: Configure BGP and Cilium network security
  ansible.builtin.include_tasks: bgp-firewall.yaml
  tags: [bgp, firewall, cilium]
