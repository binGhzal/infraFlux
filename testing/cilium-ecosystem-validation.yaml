---
# Cilium Ecosystem Validation Test Suite
# This test suite validates the complete Cilium ecosystem deployment
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-validation-tests
  namespace: kube-system
data:
  test-cilium-core.sh: |
    #!/bin/bash
    set -e
    echo "=== Testing Cilium Core Functionality ==="
    
    # Test 1: Cilium agent status
    echo "1. Checking Cilium agent status..."
    kubectl wait --for=condition=ready pod -l k8s-app=cilium -n kube-system --timeout=300s
    
    # Test 2: Cilium connectivity
    echo "2. Testing Cilium connectivity..."
    kubectl exec -n kube-system ds/cilium -- cilium connectivity test --test-namespace cilium-test
    
    # Test 3: BGP peering status
    echo "3. Checking BGP peering status..."
    kubectl exec -n kube-system ds/cilium -- cilium bgp peers
    
    # Test 4: LoadBalancer IP pools
    echo "4. Verifying LoadBalancer IP pools..."
    kubectl get ciliumloadbalancerippool -o yaml
    
    echo "âœ… Cilium core tests completed successfully"

  test-gateway-api.sh: |
    #!/bin/bash
    set -e
    echo "=== Testing Gateway API Functionality ==="
    
    # Test 1: Gateway API CRDs
    echo "1. Checking Gateway API CRDs..."
    kubectl get crd gateways.gateway.networking.k8s.io
    kubectl get crd httproutes.gateway.networking.k8s.io
    kubectl get crd gatewayclasses.gateway.networking.k8s.io
    
    # Test 2: GatewayClass status
    echo "2. Checking GatewayClass status..."
    kubectl get gatewayclass cilium -o jsonpath='{.status.conditions[?(@.type=="Accepted")].status}'
    
    # Test 3: Main Gateway status
    echo "3. Checking main Gateway status..."
    kubectl wait --for=condition=programmed gateway/main-gateway -n cilium-gateway --timeout=300s
    
    # Test 4: HTTPRoutes status
    echo "4. Checking HTTPRoutes status..."
    kubectl get httproutes --all-namespaces
    
    echo "âœ… Gateway API tests completed successfully"

  test-external-dns.sh: |
    #!/bin/bash
    set -e
    echo "=== Testing External-DNS Functionality ==="
    
    # Test 1: External-DNS pod status
    echo "1. Checking External-DNS pod status..."
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=external-dns -n external-dns --timeout=300s
    
    # Test 2: Check External-DNS logs for Cloudflare API connectivity
    echo "2. Checking External-DNS logs..."
    kubectl logs -n external-dns deployment/external-dns --tail=50
    
    # Test 3: Verify DNS records are being managed
    echo "3. Checking for managed DNS records..."
    kubectl get httproutes --all-namespaces -o jsonpath='{range .items[*]}{.metadata.annotations.external-dns\.alpha\.kubernetes\.io/hostname}{"\n"}{end}' | grep -v "^$"
    
    echo "âœ… External-DNS tests completed successfully"

  test-applications.sh: |
    #!/bin/bash
    set -e
    echo "=== Testing Application Services ==="
    
    # Test 1: All application pods are ready
    echo "1. Checking application pod status..."
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=kubernetes-dashboard -n kubernetes-dashboard --timeout=300s
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=longhorn-manager -n longhorn-system --timeout=300s
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=authentik -n authentik --timeout=300s
    kubectl wait --for=condition=ready pod -l k8s-app=hubble-ui -n kube-system --timeout=300s
    
    # Test 2: Services are accessible through Gateway
    echo "2. Testing service accessibility through Gateway..."
    GATEWAY_IP=$(kubectl get gateway main-gateway -n cilium-gateway -o jsonpath='{.status.addresses[0].value}')
    echo "Gateway IP: $GATEWAY_IP"
    
    # Test HTTP responses (expect redirects to HTTPS)
    curl -v -H "Host: dashboard.{{ cloudflare_domain }}" http://$GATEWAY_IP/ || true
    curl -v -H "Host: storage.{{ cloudflare_domain }}" http://$GATEWAY_IP/ || true
    curl -v -H "Host: auth.{{ cloudflare_domain }}" http://$GATEWAY_IP/ || true
    curl -v -H "Host: hubble.{{ cloudflare_domain }}" http://$GATEWAY_IP/ || true
    
    echo "âœ… Application service tests completed successfully"

  test-security-policies.sh: |
    #!/bin/bash
    set -e
    echo "=== Testing Security Policies ==="
    
    # Test 1: Cilium Network Policies are applied
    echo "1. Checking Cilium Network Policies..."
    kubectl get ciliumnetworkpolicies --all-namespaces
    
    # Test 2: Test network policy enforcement
    echo "2. Testing network policy enforcement..."
    # Create test pods to verify policy enforcement
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: Pod
    metadata:
      name: test-allowed
      namespace: default
      labels:
        test: allowed
    spec:
      containers:
      - name: test
        image: curlimages/curl:latest
        command: ["sleep", "3600"]
    ---
    apiVersion: v1
    kind: Pod
    metadata:
      name: test-denied
      namespace: default
      labels:
        test: denied
    spec:
      containers:
      - name: test
        image: curlimages/curl:latest
        command: ["sleep", "3600"]
    EOF
    
    kubectl wait --for=condition=ready pod/test-allowed -n default --timeout=60s
    kubectl wait --for=condition=ready pod/test-denied -n default --timeout=60s
    
    # Cleanup test pods
    kubectl delete pod test-allowed test-denied -n default
    
    echo "âœ… Security policy tests completed successfully"

  test-observability.sh: |
    #!/bin/bash
    set -e
    echo "=== Testing Observability (Hubble) ==="
    
    # Test 1: Hubble Relay status
    echo "1. Checking Hubble Relay status..."
    kubectl wait --for=condition=ready pod -l k8s-app=hubble-relay -n kube-system --timeout=300s
    
    # Test 2: Hubble UI status
    echo "2. Checking Hubble UI status..."
    kubectl wait --for=condition=ready pod -l k8s-app=hubble-ui -n kube-system --timeout=300s
    
    # Test 3: Hubble CLI connectivity
    echo "3. Testing Hubble CLI connectivity..."
    kubectl exec -n kube-system ds/cilium -- hubble status
    
    # Test 4: Sample flow observation
    echo "4. Testing flow observation..."
    kubectl exec -n kube-system ds/cilium -- hubble observe --max-flows 10
    
    echo "âœ… Observability tests completed successfully"

  run-all-tests.sh: |
    #!/bin/bash
    set -e
    echo "ðŸš€ Starting Cilium Ecosystem Validation Test Suite"
    echo "=================================================="
    
    # Run all test scripts
    bash /scripts/test-cilium-core.sh
    bash /scripts/test-gateway-api.sh
    bash /scripts/test-external-dns.sh
    bash /scripts/test-applications.sh
    bash /scripts/test-security-policies.sh
    bash /scripts/test-observability.sh
    
    echo "=================================================="
    echo "ðŸŽ‰ All Cilium Ecosystem tests completed successfully!"
    echo "The InfraFlux Cilium ecosystem is fully operational."

---
# Test Job to run validation suite
apiVersion: batch/v1
kind: Job
metadata:
  name: cilium-ecosystem-validation
  namespace: kube-system
spec:
  ttlSecondsAfterFinished: 3600  # Clean up after 1 hour
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: cilium-validation
      containers:
      - name: validator
        image: bitnami/kubectl:latest
        command: ["/bin/bash", "/scripts/run-all-tests.sh"]
        volumeMounts:
        - name: test-scripts
          mountPath: /scripts
        env:
        - name: KUBECONFIG
          value: /tmp/kubeconfig
      volumes:
      - name: test-scripts
        configMap:
          name: cilium-validation-tests
          defaultMode: 0755

---
# ServiceAccount for validation job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cilium-validation
  namespace: kube-system

---
# ClusterRole for validation job
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-validation
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "namespaces"]
  verbs: ["get", "list", "create", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets"]
  verbs: ["get", "list"]
- apiGroups: ["gateway.networking.k8s.io"]
  resources: ["gateways", "httproutes", "gatewayclasses"]
  verbs: ["get", "list"]
- apiGroups: ["cilium.io"]
  resources: ["ciliumnetworkpolicies", "ciliumloadbalanceripppools"]
  verbs: ["get", "list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding for validation job
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-validation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-validation
subjects:
- kind: ServiceAccount
  name: cilium-validation
  namespace: kube-system