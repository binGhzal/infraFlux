---
# BGP Route Advertisement Testing Suite
apiVersion: v1
kind: ConfigMap
metadata:
  name: bgp-test-scripts
  namespace: kube-system
data:
  test-bgp-routes.sh: |
    #!/bin/bash
    set -e
    
    echo "üîç BGP Route Advertisement Validation"
    echo "====================================="
    
    # Test 1: Check BGP Agent Status
    echo "1. Checking Cilium BGP agent status..."
    kubectl exec -n kube-system ds/cilium -- cilium bgp peers
    echo ""
    
    # Test 2: Verify BGP Sessions
    echo "2. Verifying BGP sessions are established..."
    BGP_SESSIONS=$(kubectl exec -n kube-system ds/cilium -- cilium bgp peers | grep -c "established" || true)
    if [ "$BGP_SESSIONS" -gt 0 ]; then
        echo "‚úÖ Found $BGP_SESSIONS established BGP sessions"
    else
        echo "‚ùå No established BGP sessions found"
        exit 1
    fi
    echo ""
    
    # Test 3: Check Advertised Routes
    echo "3. Checking advertised routes..."
    kubectl exec -n kube-system ds/cilium -- cilium bgp routes advertised ipv4 unicast
    echo ""
    
    # Test 4: Verify LoadBalancer IP Pool Configuration
    echo "4. Verifying LoadBalancer IP pools..."
    kubectl get ciliumloadbalancerippool -o wide
    echo ""
    
    # Test 5: Create Test LoadBalancer Service
    echo "5. Creating test LoadBalancer service..."
    cat <<EOF | kubectl apply -f -
    apiVersion: v1
    kind: Service
    metadata:
      name: bgp-test-lb
      namespace: default
      annotations:
        io.cilium/lb-ipam-ips: "{{ cilium_config.lb_ip_range | split('/') | first | regex_replace('0$', '85') }}"
    spec:
      type: LoadBalancer
      selector:
        app: bgp-test
      ports:
      - port: 80
        targetPort: 8080
    EOF
    
    # Wait for LoadBalancer IP assignment
    echo "Waiting for LoadBalancer IP assignment..."
    RETRIES=30
    while [ $RETRIES -gt 0 ]; do
        LB_IP=$(kubectl get svc bgp-test-lb -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
        if [ -n "$LB_IP" ]; then
            echo "‚úÖ LoadBalancer IP assigned: $LB_IP"
            break
        fi
        echo -n "."
        sleep 2
        RETRIES=$((RETRIES-1))
    done
    
    if [ -z "$LB_IP" ]; then
        echo "‚ùå LoadBalancer IP not assigned after 60 seconds"
        kubectl describe svc bgp-test-lb
        exit 1
    fi
    echo ""
    
    # Test 6: Verify Route Advertisement for Service
    echo "6. Verifying route advertisement for test service..."
    kubectl exec -n kube-system ds/cilium -- cilium bgp routes advertised ipv4 unicast | grep -q "$LB_IP" && \
        echo "‚úÖ Route for $LB_IP is being advertised" || \
        echo "‚ö†Ô∏è  Route for $LB_IP not found in advertised routes"
    echo ""
    
    # Test 7: BGP Peering Details
    echo "7. BGP peering details..."
    kubectl exec -n kube-system ds/cilium -- cilium bgp peers -o json | \
        jq -r '.[] | "Peer: \(.peer_address) ASN: \(.peer_asn) State: \(.session_state) Uptime: \(.uptime)"'
    echo ""
    
    # Test 8: Check BGP Configuration
    echo "8. Current BGP configuration..."
    kubectl get ciliumbgppeeringpolicy -o yaml
    echo ""
    
    # Cleanup
    echo "Cleaning up test resources..."
    kubectl delete svc bgp-test-lb --ignore-not-found=true
    
    echo "====================================="
    echo "‚úÖ BGP validation completed!"

  bgp-failover-test.sh: |
    #!/bin/bash
    set -e
    
    echo "üîÑ BGP Failover Testing"
    echo "======================="
    
    # Create test deployment and service
    echo "Creating test application for failover testing..."
    cat <<EOF | kubectl apply -f -
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: bgp-failover-test
      namespace: default
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: bgp-failover-test
      template:
        metadata:
          labels:
            app: bgp-failover-test
        spec:
          containers:
          - name: nginx
            image: nginx:alpine
            ports:
            - containerPort: 80
            resources:
              requests:
                cpu: 50m
                memory: 64Mi
              limits:
                cpu: 100m
                memory: 128Mi
    ---
    apiVersion: v1
    kind: Service
    metadata:
      name: bgp-failover-test
      namespace: default
    spec:
      type: LoadBalancer
      selector:
        app: bgp-failover-test
      ports:
      - port: 80
        targetPort: 80
    EOF
    
    # Wait for LoadBalancer IP
    echo "Waiting for LoadBalancer IP..."
    kubectl wait --for=jsonpath='{.status.loadBalancer.ingress[0].ip}' --timeout=60s svc/bgp-failover-test
    
    LB_IP=$(kubectl get svc bgp-failover-test -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
    echo "LoadBalancer IP: $LB_IP"
    
    # Get current BGP advertiser node
    echo "Finding current BGP advertiser node..."
    ADVERTISER_NODE=$(kubectl exec -n kube-system ds/cilium -- cilium bgp routes advertised ipv4 unicast | \
        grep "$LB_IP" | head -1 | awk '{print $NF}')
    echo "Current advertiser: $ADVERTISER_NODE"
    
    # Simulate node failure
    echo "Simulating BGP speaker failure on node: $ADVERTISER_NODE"
    kubectl label node "$ADVERTISER_NODE" bgp-test=drain --overwrite
    kubectl drain "$ADVERTISER_NODE" --ignore-daemonsets --delete-emptydir-data --force
    
    # Monitor failover
    echo "Monitoring BGP failover..."
    sleep 10
    
    # Check new advertiser
    NEW_ADVERTISER=$(kubectl exec -n kube-system ds/cilium -- cilium bgp routes advertised ipv4 unicast | \
        grep "$LB_IP" | head -1 | awk '{print $NF}')
    
    if [ "$NEW_ADVERTISER" != "$ADVERTISER_NODE" ]; then
        echo "‚úÖ BGP failover successful! New advertiser: $NEW_ADVERTISER"
    else
        echo "‚ùå BGP failover failed - same advertiser node"
    fi
    
    # Restore node
    echo "Restoring node..."
    kubectl uncordon "$ADVERTISER_NODE"
    kubectl label node "$ADVERTISER_NODE" bgp-test-
    
    # Cleanup
    echo "Cleaning up..."
    kubectl delete deployment bgp-failover-test --ignore-not-found=true
    kubectl delete svc bgp-failover-test --ignore-not-found=true
    
    echo "======================="
    echo "‚úÖ BGP failover test completed!"

---
# Job to run BGP validation tests
apiVersion: batch/v1
kind: Job
metadata:
  name: bgp-validation-test
  namespace: kube-system
spec:
  ttlSecondsAfterFinished: 3600
  template:
    spec:
      serviceAccountName: bgp-test
      restartPolicy: Never
      containers:
      - name: bgp-tester
        image: bitnami/kubectl:latest
        command: ["/bin/bash", "/scripts/test-bgp-routes.sh"]
        volumeMounts:
        - name: test-scripts
          mountPath: /scripts
        env:
        - name: CILIUM_NAMESPACE
          value: kube-system
      volumes:
      - name: test-scripts
        configMap:
          name: bgp-test-scripts
          defaultMode: 0755

---
# ServiceAccount for BGP testing
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bgp-test
  namespace: kube-system

---
# ClusterRole for BGP testing
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: bgp-test
rules:
- apiGroups: [""]
  resources: ["pods", "services", "nodes"]
  verbs: ["get", "list", "create", "delete", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "create", "delete"]
- apiGroups: ["cilium.io"]
  resources: ["ciliumbgppeeringpolicies", "ciliumloadbalanceripppools"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create", "get"]

---
# ClusterRoleBinding for BGP testing
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: bgp-test
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: bgp-test
subjects:
- kind: ServiceAccount
  name: bgp-test
  namespace: kube-system