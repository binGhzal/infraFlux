#!/bin/bash

# TODO: InfraFlux Refactoring Tasks
# - [x] Created modular Ansible setup script
# - [ ] Add support for custom Ansible collection sources
# - [ ] Add collection version pinning
# - [ ] Add SSH key management for better security

# Load common functions
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
source "${SCRIPT_DIR}/../lib/common.sh"

# Change to project root
PROJECT_ROOT="$(get_project_root)"
cd "${PROJECT_ROOT}"

# Function to install Ansible collections
install_ansible_collections() {
    print_status "Installing Ansible collections..."

    if [ ! -d "configuration" ]; then
        print_error "Configuration directory not found. Make sure Terraform has been applied successfully."
        return 1
    fi

    cd configuration

    if [ -f "collections/requirements.yaml" ]; then
        print_status "Installing collections from requirements.yaml..."
        if ansible-galaxy collection install -r collections/requirements.yaml; then
            print_success "Ansible collections installed successfully"
        else
            print_error "Failed to install Ansible collections"
            cd ../..
            return 1
        fi
    else
        print_warning "No Ansible collections requirements found"
    fi

    cd ../..
    return 0
}

# Function to setup SSH host keys for cluster nodes
setup_ssh_host_keys() {
    print_status "Setting up SSH host keys for cluster nodes..."

    # Check if ansible.cfg exists (should be generated by Terraform)
    if [ ! -f "ansible.cfg" ]; then
        print_error "Ansible configuration file not found. Make sure Terraform has been applied successfully."
        return 1
    fi

    # Check if inventory file exists
    if [ ! -f "configuration/inventory/hosts.ini" ]; then
        print_error "Ansible inventory file not found. Make sure Terraform has been applied successfully."
        return 1
    fi

    # Create SSH directory if it doesn't exist
    mkdir -p ~/.ssh
    chmod 700 ~/.ssh

    # Extract IPs from inventory and add to known_hosts
    print_status "Adding SSH host keys for cluster nodes..."
    local ip_count=0
    grep "ansible_host=" configuration/inventory/hosts.ini | awk -F'ansible_host=' '{print $2}' | while read ip; do
        if [ -n "$ip" ]; then
            print_status "Adding SSH host key for $ip..."
            ssh-keyscan -H "$ip" >>~/.ssh/known_hosts 2>/dev/null || true
            ((ip_count++))
        fi
    done

    # Remove duplicates from known_hosts
    if [ -f ~/.ssh/known_hosts ]; then
        sort -u ~/.ssh/known_hosts >~/.ssh/known_hosts.tmp
        mv ~/.ssh/known_hosts.tmp ~/.ssh/known_hosts
        print_success "SSH host keys configured"
    fi

    return 0
}

# Function to setup all Ansible prerequisites
setup_ansible() {
    print_status "Setting up Ansible environment..."
    
    if ! install_ansible_collections; then
        return 1
    fi
    
    if ! setup_ssh_host_keys; then
        return 1
    fi
    
    print_success "Ansible environment setup completed"
    return 0
}

# Run the setup if script is executed directly
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    setup_ansible
    exit $?
fi