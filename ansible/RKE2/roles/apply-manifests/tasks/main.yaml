# Wait for all nodes to be ready before deploying MetalLB
- name: Wait for all nodes to be ready
  ansible.builtin.command:
    cmd: "kubectl get nodes --no-headers"
  register: nodes_status
  until: nodes_status.stdout_lines | length >= (groups['servers'] | length + groups['agents'] | length)
  retries: 60
  delay: 10
  changed_when: false
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]

- name: Wait for all nodes to be in Ready state
  ansible.builtin.command:
    cmd: "kubectl wait --for=condition=Ready nodes --all --timeout=600s"
  changed_when: false
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]

# Create namespace so that we can deploy metallb
- name: Apply metallb namespace
  ansible.builtin.command:
    cmd: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/{{ metallb_version }}/config/manifests/metallb-namespace.yaml
  become_user: "{{ ansible_user }}"
  changed_when: true
  when: inventory_hostname == groups['servers'][0]

# Apply metallb manifest
- name: Apply metallb manifest
  ansible.builtin.command:
    cmd: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/{{ metallb_version }}/config/manifests/metallb-native.yaml
  become_user: "{{ ansible_user }}"
  changed_when: true
  when: inventory_hostname == groups['servers'][0]

# Wait for metallb deployment pods to be alive before deploying metallb manifests
- name: Wait for metallb controller to be ready
  ansible.builtin.command:
    cmd: "kubectl wait --namespace metallb-system --for=condition=ready pod --selector=component=controller --timeout=1800s"
  changed_when: false
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]

- name: Wait for metallb speaker to be ready
  ansible.builtin.command:
    cmd: "kubectl wait --namespace metallb-system --for=condition=ready pod --selector=component=speaker --timeout=1800s"
  changed_when: false
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]

# Deploy L2 Advertisement configuration
- name: Copy metallb L2Advertisement to server 1
  ansible.builtin.template:
    src: templates/metallb-l2advertisement.j2
    dest: /home/{{ ansible_user }}/l2advertisement.yaml
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  when: inventory_hostname == groups['servers'][0]

# Apply L2 Advertisement for metallb
- name: Apply metallb L2 Advertisement
  ansible.builtin.command:
    cmd: kubectl apply -f /home/{{ ansible_user }}/l2advertisement.yaml
  become_user: "{{ ansible_user }}"
  changed_when: true
  when: inventory_hostname == groups['servers'][0]

# Deploy metal IP Pool to Server 1
- name: Copy metallb IPPool to server 1
  ansible.builtin.template:
    src: templates/metallb-ippool.j2
    dest: /home/{{ ansible_user }}/ippool.yaml
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  when: inventory_hostname == groups['servers'][0]

# don't think this will work as nodes are no execute, might need agents first
- name: Apply metallb ipppool
  ansible.builtin.command:
    cmd: kubectl apply -f /home/{{ ansible_user }}/ippool.yaml
  become_user: "{{ ansible_user }}"
  changed_when: true
  when: inventory_hostname == groups['servers'][0]

# Validate cluster deployment
- name: Wait for all nodes to be ready with proper roles
  ansible.builtin.command:
    cmd: "kubectl get nodes -o wide"
  register: cluster_nodes
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]

- name: Display cluster status
  ansible.builtin.debug:
    var: cluster_nodes.stdout_lines
  when: inventory_hostname == groups['servers'][0]

- name: Validate metallb deployment
  ansible.builtin.command:
    cmd: "kubectl get pods -n metallb-system"
  register: metallb_pods
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]

- name: Display metallb status
  ansible.builtin.debug:
    var: metallb_pods.stdout_lines
  when: inventory_hostname == groups['servers'][0]

# Final validation
- name: Test cluster access via VIP
  ansible.builtin.command:
    cmd: "kubectl --server=https://{{ vip }}:6443 --insecure-skip-tls-verify get nodes"
  register: vip_access_test
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]

- name: Display VIP access test results
  ansible.builtin.debug:
    msg: "✓ Cluster is accessible via VIP {{ vip }}"
  when:
    - inventory_hostname == groups['servers'][0]
    - vip_access_test.rc == 0

- name: Create test LoadBalancer service for validation
  ansible.builtin.copy:
    content: |
      apiVersion: v1
      kind: Service
      metadata:
        name: nginx-lb-test
        namespace: default
      spec:
        type: LoadBalancer
        ports:
        - port: 80
          targetPort: 80
        selector:
          app: nginx-test
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: nginx-test
        namespace: default
      spec:
        replicas: 2
        selector:
          matchLabels:
            app: nginx-test
        template:
          metadata:
            labels:
              app: nginx-test
          spec:
            containers:
            - name: nginx
              image: nginx:alpine
              ports:
              - containerPort: 80
    dest: /home/{{ ansible_user }}/nginx-test.yaml
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
  when: inventory_hostname == groups['servers'][0]

- name: Deploy test application
  ansible.builtin.command:
    cmd: kubectl apply -f /home/{{ ansible_user }}/nginx-test.yaml
  become_user: "{{ ansible_user }}"
  changed_when: true
  when: inventory_hostname == groups['servers'][0]

- name: Wait for LoadBalancer IP assignment
  ansible.builtin.command:
    cmd: "kubectl get service nginx-lb-test -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
  register: lb_ip
  until: lb_ip.stdout != ""
  retries: 30
  delay: 10
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]

- name: Display LoadBalancer IP
  ansible.builtin.debug:
    msg: "✓ MetalLB assigned IP: {{ lb_ip.stdout }}"
  when:
    - inventory_hostname == groups['servers'][0]
    - lb_ip.stdout != ""
